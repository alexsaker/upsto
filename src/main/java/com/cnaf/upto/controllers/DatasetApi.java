/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cnaf.upto.controllers;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "{dataset}", description = "the {dataset} API")
public interface DatasetApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /{dataset}/{version}/fields : Provides the general information about the API and the list of fields that can be used to query the dataset.
     * This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the &#39;fields&#39; attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
     *
     * @param dataset Name of the dataset. (required)
     * @param version Version of the dataset. (required)
     * @return The dataset API for the given version is found and it is accessible to consume. (status code 200)
     *         or The combination of dataset name and version is not found in the system or it is not published yet to be consumed by public. (status code 404)
     */
    @ApiOperation(value = "Provides the general information about the API and the list of fields that can be used to query the dataset.", nickname = "listSearchableFields", notes = "This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.", response = String.class, tags={ "metadata", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The dataset API for the given version is found and it is accessible to consume.", response = String.class),
        @ApiResponse(code = 404, message = "The combination of dataset name and version is not found in the system or it is not published yet to be consumed by public.", response = String.class) })
    @RequestMapping(value = "/{dataset}/{version}/fields",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> listSearchableFields(@ApiParam(value = "Name of the dataset.",required=true) @PathVariable("dataset") String dataset,@ApiParam(value = "Version of the dataset.",required=true) @PathVariable("version") String version) throws Exception {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /{dataset}/{version}/records : Provides search capability for the data set with the given search criteria.
     * This API is based on Solr/Lucene Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the &#39;fields&#39; attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
     *
     * @param version Version of the dataset. (required)
     * @param dataset Name of the dataset. In this case, the default value is oa_citations (required)
     * @param criteria Uses Lucene Query Syntax in the format of propertyName:value, propertyName:[num1 TO num2] and date range format: propertyName:[yyyyMMdd TO yyyyMMdd]. In the response please see the &#39;docs&#39; element which has the list of record objects. Each record structure would consist of all the fields and their corresponding values. (required)
     * @param start Starting record number. Default value is 0. (optional, default to 0)
     * @param rows Specify number of rows to be returned. If you run the search with default values, in the response you will see &#39;numFound&#39; attribute which will tell the number of records available in the dataset. (optional, default to 100)
     * @return successful operation (status code 200)
     *         or No matching record found for the given criteria. (status code 404)
     */
    @ApiOperation(value = "Provides search capability for the data set with the given search criteria.", nickname = "performSearch", notes = "This API is based on Solr/Lucene Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.", response = Map.class, responseContainer = "List", tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Object.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No matching record found for the given criteria.") })
    @RequestMapping(value = "/{dataset}/{version}/records",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<List<Map<String, Object>>> performSearch(@ApiParam(value = "Version of the dataset.",required=true, defaultValue="v1") @PathVariable("version") String version,@ApiParam(value = "Name of the dataset. In this case, the default value is oa_citations",required=true, defaultValue="oa_citations") @PathVariable("dataset") String dataset,@ApiParam(value = "Uses Lucene Query Syntax in the format of propertyName:value, propertyName:[num1 TO num2] and date range format: propertyName:[yyyyMMdd TO yyyyMMdd]. In the response please see the 'docs' element which has the list of record objects. Each record structure would consist of all the fields and their corresponding values.", required=true, defaultValue="*:*") @RequestPart(value="criteria", required=true)  String criteria,@ApiParam(value = "Starting record number. Default value is 0.", defaultValue="0") @RequestPart(value="start", required=false)  Integer start,@ApiParam(value = "Specify number of rows to be returned. If you run the search with default values, in the response you will see 'numFound' attribute which will tell the number of records available in the dataset.", defaultValue="100") @RequestPart(value="rows", required=false)  Integer rows) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"key\" : \"{}\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.valueOf(200));

    }

}
